@page "/admin/product"
@page "/admin/product/{id:int}"
@inject IServiciulProduse ServiciulProduse
@inject IServiciulTipuriDeProduse ServiciulTipuriDeProduse
@inject IServiciulCategorii ServiciulCategorii
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@if (loading)
{
	<span>@msg</span>
}
else
{
	@if (product.Editing)
	{
		<h3 class="edit-title">Editeaza "@product.Title"</h3>
	}
	else if (product.IsNew)
	{
		<h3 class="new-product-title">Creaza un produs nou</h3>
	}

	<EditForm Model="product" OnValidSubmit="AddOrUpdateProduct">
		<DataAnnotationsValidator></DataAnnotationsValidator>
		<div class="form-group">
			<label for="title">Titlu</label>
			<InputText id="title" @bind-Value="product.Title" class="form-control"></InputText>
		</div>
		<div class="form-group">
			<label for="imageUrl">Imagine Url</label>
			<InputText id="imageurl" @bind-Value="product.ImageUrl" class="form-control"></InputText>
		</div>
		<div class="image-container">
			@if (!string.IsNullOrEmpty(product.ImageUrl))
			{
				<img src="@product.ImageUrl" />
			}
			else
			{
				@foreach (var image in product.Images)
				{
					<MudCard Class="image-card">
						<MudCardContent>
							<MudImage Src="@image.Data" />
						</MudCardContent>
						<MudCardActions>
							<MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="@(() => RemoveImage(image.Id))">Remove</MudButton>
						</MudCardActions>
					</MudCard>
				}
			}
		</div>
		<div class="form-group">
			<label for="images">Imagini din stocarea interna</label>
			<InputFile id="images" OnChange="OnFileChange" multiple class="form-control"></InputFile>
		</div>
		<div class="form-group">
			<label for="description">Descriere</label>
			<InputTextArea id="description" @bind-Value="product.Description" class="form-control"></InputTextArea>
		</div>
		<hr />
		<div class="header">
			<div class="col">Tip de produs / Varianta</div>
			<div class="col">Pret</div>
			<div class="col">Pret initial</div>
			<div class="col">Vizibil</div>
			<div class="col"></div>
		</div>
		@foreach (var variant in product.Variants)
		{
			<div class="row">
				<div class="col">
					<InputSelect disabled="@variant.Deleted" @bind-Value="variant.ProductTypeId" class="form-control">
						@foreach (var productType in ServiciulTipuriDeProduse.ProductTypes)
						{
							<option value="@productType.Id.ToString()">@productType.Name</option>
						}
					</InputSelect>
				</div>
				<div class="col">
					<InputNumber @bind-Value="variant.Price" class="form-control" disabled="@variant.Deleted"></InputNumber>
				</div>
				<div class="col">
					<InputNumber @bind-Value="variant.OriginalPrice" class="form-control" disabled="@variant.Deleted"></InputNumber>
				</div>
				<div class="col col-visible">
					<InputCheckbox @bind-Value="variant.Visible" disabled="@variant.Deleted"></InputCheckbox>
				</div

				<div class="col">
					<button type="button" class="btn btn-primary" disabled="@variant.Deleted" @onclick="@(() => RemoveVariant(variant.ProductTypeId))">
						<i class="oi oi-trash"></i>
					</button>
				</div>
			</div>
		}
		<button type="button" class="btn btn-primary" @onclick="AddVariant">
			<i class="oi oi-plus"></i> Adauga Varianta
		</button>
		<hr />

		<div class="form-group">
			<label for="category">Categorie</label>
			<InputSelect id="category" @bind-Value="product.CategoryId" class="form-control">
				@foreach (var category in ServiciulCategorii.AdminCategories)
				{
					<option value="@category.Id">@category.Name</option>
				}
			</InputSelect>
		</div>
		<hr />
		<div class="form-check">
			<InputCheckbox id="featured" @bind-Value="product.Featured" class="form-check-input"></InputCheckbox>
			<label for="featured" class="form-check-label">Pagina principala</label>
		</div>
		<div class="form-check">
			<InputCheckbox id="visible" @bind-Value="product.Visible" class="form-check-input"></InputCheckbox>
			<label for="visible" class="form-check-label">Vizibil</label>
		</div>
		<hr />
		<button type="submit" class="btn btn-primary float-end">@btnText</button>
		<ValidationSummary></ValidationSummary>
	</EditForm>

	@if (!product.IsNew)
	{
		<button type="button" class="btn btn-danger float-start" @onclick="DeleteProduct">
			Sterge produs
		</button>
	}
}

@code {
	[Parameter]
	public int Id { get; set; }

	Product product = new Product();
	bool loading = true;
	string btnText = "";
	string msg = "Loading...";

	protected override async Task OnInitializedAsync()
	{
		await ServiciulTipuriDeProduse.GetProductTypes();
		await ServiciulCategorii.GetAdminCategories();
	}

	protected override async Task OnParametersSetAsync()
	{
		if (Id == 0)
		{
			product = new Product { IsNew = true };
			btnText = "Creaza Produs";
		}
		else
		{
			Product dbProduct = (await ServiciulProduse.GetProduct(Id)).Data;
			if (dbProduct == null)
			{
				msg = $"Produsul cu ID '{Id}' nu exista!";
				return;
			}
			product = dbProduct;
			product.Editing = true;
			btnText = "Actualizeaza Produs";
		}
		loading = false;
	}

	void RemoveVariant(int productTypeId)
	{
		var variant = product.Variants.Find(v => v.ProductTypeId == productTypeId);
		if (variant == null)
		{
			return;
		}
		if (variant.IsNew)
		{
			product.Variants.Remove(variant);
		}
		else
		{
			variant.Deleted = true;
		}
	}

	void AddVariant()
	{
		product.Variants
			.Add(new ProductVariant { IsNew = true, ProductId = product.Id });
	}

	async void AddOrUpdateProduct()
	{
		if (product.IsNew)
		{
			var result = await ServiciulProduse.CreateProduct(product);
			NavigationManager.NavigateTo($"admin/product/{result.Id}");
		}
		else
		{
			product.IsNew = false;
			product = await ServiciulProduse.UpdateProduct(product);
			NavigationManager.NavigateTo($"admin/product/{product.Id}", true);
		}
	}

	async void DeleteProduct()
	{
		bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm",
		$"Esti sigur ca vrei sa stergi produsul '{product.Title}'?");
		if (confirmed)
		{
			await ServiciulProduse.DeleteProduct(product);
			NavigationManager.NavigateTo("admin/products");
		}

	}

	async Task OnFileChange(InputFileChangeEventArgs e)
	{
		var format = "image/png";
		foreach (var image in e.GetMultipleFiles(int.MaxValue))
		{
			var resizedImage = await image.RequestImageFileAsync(format, 200, 200);
			var buffer = new byte[resizedImage.Size];
			await resizedImage.OpenReadStream().ReadAsync(buffer);
			var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
			product.Images.Add(new Image { Data = imageData });
		}
	}

	void RemoveImage (int id)
	{
		var image = product.Images.FirstOrDefault(i => i.Id == id);
		if(image != null)
		{
			product.Images.Remove(image);
		}
	}
}