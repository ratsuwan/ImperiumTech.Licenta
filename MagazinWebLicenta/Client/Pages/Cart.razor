@page "/cart"
@inject ICartService CartService
@inject IOrderService OrderService
@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<PageTitle>ShoppingCart</PageTitle>
<h3>Cosul meu</h3>

@if (cartProducts == null || cartProducts.Count == 0)
{
    <div class="empty-cart-message">
        <span>@message</span>
    </div>
}
else
{
    <div class="cart-container">
        <div class="product-box">
            @foreach (var product in cartProducts)
            {
                <div class="cart-item">
                    <div class="image-wrapper">
                        <img src="@product.ImageUrl" class="image" />
                    </div>
                    <div class="item-details">
                        <h5><a href="/product/@product.ProductId">@product.Title</a></h5>
                        <span>@product.ProductType</span><br />
                        <span>Cantitate</span>
                        <input type="number" value="@product.Quantity"
                       @onchange="@((ChangeEventArgs e) => UpdateQuantity(e, product))"
                               class="form-control input-quantity"
                               min="1" />
                        <button class="btn-delete" @onclick="@(() =>
                            RemoveProductFromCart(product.ProductId, product.ProductTypeId))">
                            
                            <i class="oi oi-trash"></i>
                        </button>
                    </div>
                    <div class="item-price">@(product.Price * product.Quantity) lei</div>
                </div>
            }
            <div class="cart-total">
                Total (@cartProducts.Count) : @cartProducts.Sum(product => @product.Price * product.Quantity) lei
            </div>
        </div>

        @if (isAuthenticated)
        {
            <div class="address-box">
                <div class="delivery-address">
                    <h5>Adresa de livrare</h5>
                    <AddressForm />
                </div>
                <button @onclick="PlaceOrder" class="btn alert-success float-end mt-1">Finalizare comanda</button>
            </div>
        }
    </div>
}








@code {
	List<CartProductResponse> cartProducts = null;
	string message = "Cosul se incarca...";
	bool isAuthenticated = false;

	protected override async Task OnInitializedAsync()
	{
		isAuthenticated = await AuthService.IsUserAuthenticated();
		await LoadCart();

	}

	private async Task RemoveProductFromCart(int productId, int productTypeId)
	{
		await CartService.RemoveProductFromCart(productId, productTypeId);
		await LoadCart();
	}

	private async Task LoadCart()
	{
		await CartService.GetCartItemsCount();
		cartProducts = await CartService.GetCartProducts();

		if (cartProducts == null || cartProducts.Count == 0)
		{
			message = "Cosul este gol. Adauga produse :)";
		}	
	}

	private async Task UpdateQuantity(ChangeEventArgs e, CartProductResponse product)
	{
		product.Quantity = int.Parse(e.Value.ToString());
		if (product.Quantity < 1)
			product.Quantity = 1;
		await CartService.UpdateQuantity(product);
	}

	private async Task PlaceOrder()
	{
		string url = await OrderService.PlaceOrder();
		NavigationManager.NavigateTo(url);
	}

}
