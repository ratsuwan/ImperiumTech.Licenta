@inject IProductService ProductService
@implements IDisposable

<center><h2 class="section-title">Oferte de Top</h2></center>
@if (ProductService.Products == null || ProductService.Products.Count == 0)
{
    <div class="container">
        <span class="message">@ProductService.Message</span>
    </div>
}
else
{
    <div class="container">
        @foreach (var product in ProductService.Products)
        {
            @if (product.Featured)
            {
                <div class="featured-product">
                    <div class="image-wrapper">
                        <a href="product/@product.Id">
                            @if (!string.IsNullOrEmpty(product.ImageUrl))
                            {
                                <img src="@product.ImageUrl" alt="@product.Title" />
                            }
                            else if (product.Images.Count > 0)
                            {
                                <img src="@product.Images[0].Data" alt="@product.Title" />
                            }
                        </a>
                    </div>
                    <h4 class="product-title"><a href="product/@product.Id">@product.Title</a></h4>
                    @if (product.Variants != null && product.Variants.Count > 0)
                    {
                        <h5 class="price"> @product.Variants[0].Price lei</h5>
                    }
                </div>
            }
        }
    </div>
}



@code {

	protected override void OnInitialized()
	{
		ProductService.ProductsChanged += StateHasChanged;
	}

	public void Dispose()
	{
		ProductService.ProductsChanged -= StateHasChanged;
	}

}
