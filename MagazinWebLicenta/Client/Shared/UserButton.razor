@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AutheticationStateProvider
@inject NavigationManager NavigationManager
@inject ICartService CartService


<div class="dropdown">
	<button
		@onclick="ToggleUserMenu"
		@onfocusout="HideUserMenu"
		class="btn btn-secondary dropdown-toggle user-button">
		<i class="oi oi-person"></i>
	</button>
	<div class="dropdown-menu dropdown-menu-right @UserMenuCssClass">
		<AuthorizeView>
			<Authorized>
				<a href="profile" class="dropdown-item">Profil</a>
				<a href="orders" class="dropdown-item">Comenzi</a>
				<hr />
				<AdminMenu />
				<button class="dropdown-item" @onclick="Logout">Iesi din cont </button>
			</Authorized>
			<NotAuthorized>
				<a href="login?returnUrl=@NavigationManager.ToBaseRelativePath(NavigationManager.Uri)" class="dropdown-item">Intra in cont</a>
				<a href="register" class="dropdown-item">Inregistrare</a>
			</NotAuthorized>
		</AuthorizeView>
	</div>
			
	
</div>

@code {
	private bool showUserMenu = false;

	private string UserMenuCssClass => showUserMenu ? "show-menu" : null;

	private void ToggleUserMenu()
	{
		showUserMenu = !showUserMenu;
	}

	private async Task HideUserMenu()
	{
		await Task.Delay(200);
		showUserMenu = false;
	}

	private async Task Logout()
	{
		await LocalStorage.RemoveItemAsync("authToken");
		await CartService.GetCartItemsCount();
		await AutheticationStateProvider.GetAuthenticationStateAsync();
		NavigationManager.NavigateTo("");
	}
}
